openapi: 3.1.0

info:
  title: dearlies
  description: |-
    Dearlies REST API
  version: 1.0.0

# APIサーバーのURL
servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Development server

# APIのエンドポイント定義
paths:
  /users: # エンドポイントのパス
    get: # HTTPメソッド (GET)
      summary: ユーザーリストを取得 # 操作の概要
      description: 登録されているユーザーのリストを返します。 # 操作の詳細説明 (任意)
      tags: # タグ (任意、グループ化に使用)
        - Users
      operationId: getUsers # 操作の一意なID (任意、コード生成などに使用)
      parameters: # パスパラメータやクエリパラメータ (任意)
        - name: limit
          in: query
          description: 返すユーザー数の上限
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 20
        - name: offset
          in: query
          description: リストの開始位置オフセット
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
      responses: # レスポンス定義
        '200': # HTTPステータスコード
          description: 成功。ユーザーリストを返します。
          content:
            application/json: # レスポンスのメディアタイプ
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User' # 再利用可能なスキーマを参照
        '400': # 別のステータスコード
          description: 不正なリクエストパラメータ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post: # HTTPメソッド (POST)
      summary: 新しいユーザーを作成
      description: 新しいユーザーをシステムに登録します。
      tags:
        - Users
      operationId: createUser
      requestBody: # リクエストボディ定義 (任意)
        description: 作成するユーザー情報
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201': # HTTPステータスコード
          description: ユーザー作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 不正な入力データ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}: # パスパラメータを含むエンドポイント
    get:
      summary: 特定のユーザー情報を取得
      tags:
        - Users
      operationId: getUserById
      parameters: # パスパラメータ定義
        - name: userId
          in: path # パラメータの場所 (path, query, header, cookie)
          description: 取得するユーザーのID
          required: true
          schema:
            type: string # または integer など、実際のIDの型に合わせてください
            format: uuid # 例 (任意)
      responses:
        '200':
          description: 成功。ユーザー情報を返します。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: ユーザーが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# 再利用可能なコンポーネント定義
components:
  schemas: # データモデル (スキーマ) 定義
    User: # スキーマ名
      type: object # データ型 (object, array, string, number, integer, boolean)
      properties: # オブジェクトのプロパティ
        id:
          type: string
          format: uuid
          description: ユーザーの一意なID
          readOnly: true # GETレスポンスでのみ含まれ、POST/PUTリクエストでは無視される (任意)
        username:
          type: string
          description: ユーザー名
        email:
          type: string
          format: email
          description: メールアドレス
        createdAt:
          type: string
          format: date-time
          description: 作成日時
          readOnly: true
      required: # 必須プロパティ (任意)
        - id
        - username
        - email
        - createdAt
    NewUser: # 別のスキーマ (ユーザー作成用)
      type: object
      properties:
        username:
          type: string
          description: ユーザー名
        email:
          type: string
          format: email
          description: メールアドレス
        password:
          type: string
          format: password # パスワードであることを示す (任意)
          description: パスワード
      required:
        - username
        - email
        - password
    Error: # エラーレスポンス用スキーマ
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: エラーコード
        message:
          type: string
          description: エラーメッセージ
      required:
        - code
        - message

  securitySchemes: # セキュリティスキーマ定義 (任意)
    BearerAuth: # 別のスキーマ (JWTなど)
      type: http
      scheme: bearer
      bearerFormat: JWT # (任意)

tags:
  - name: Users
    description: ユーザー関連の操作